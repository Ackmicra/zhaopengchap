package com.uranus.platform.business.jd.service.impl;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.druid.util.StringUtils;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.uranus.platform.business.jd.dao.JdLoanPaymentStepDataMapper;
import com.uranus.platform.business.jd.dao.JdPaymentOrderDataMapper;
import com.uranus.platform.business.jd.dao.JdRepurchaseApplyDataMapper;
import com.uranus.platform.business.jd.dao.JdTransferPlansDataMapper;
import com.uranus.platform.business.jd.entity.po.JdLoanPaymentStepData;
import com.uranus.platform.business.jd.entity.po.JdPaymentOrderData;
import com.uranus.platform.business.jd.entity.po.JdRepurchaseApplyData;
import com.uranus.platform.business.jd.entity.po.JdTransferPlansData;
import com.uranus.platform.business.jd.entity.pojo.JDLoanRepurchaseApply;
import com.uranus.platform.business.jd.entity.pojo.JdLoanPaymentOrder;
import com.uranus.platform.business.jd.entity.pojo.JdLoanTransferPlan;
import com.uranus.platform.business.jd.entity.pojo.JdPaymentOrder;
import com.uranus.platform.business.jd.entity.status.JdResponseStatus;
import com.uranus.platform.business.jd.entity.vo.JdResponseView;
import com.uranus.platform.business.jd.service.JdTransferPlanService;
import com.uranus.platform.business.jd.service.trans.PaymentOrder2312Service;
import com.uranus.platform.business.jd.service.trans.RepurchaseApply3306Service;
import com.uranus.platform.business.jd.service.trans.TransferPlan2311Service;
import com.uranus.platform.business.pub.entity.dto.Request2202Dto;
import com.uranus.platform.business.pub.entity.dto.Response2202Dto;
import com.uranus.platform.business.pub.entity.po.ProjBaseData;
import com.uranus.platform.business.pub.service.CreateKeyService;
import com.uranus.platform.business.pub.service.ProjBaseService;
import com.uranus.platform.business.ws.search.Request;
import com.uranus.platform.business.ws.search.Response;
import com.uranus.platform.business.ws.service.SearchService;
import com.uranus.platform.utils.aop.log.WsBaseLog;
import com.uranus.platform.utils.exception.PlatformExceptionFactory;
import com.uranus.platform.utils.status.CmsBusinessStatus;
import com.uranus.tools.beans.BeanCopyUtils;
import com.uranus.tools.utils.DateUtils;
import com.uranus.tools.validator.UranusValidator;

/**
 * 
 * @ClassName:：JdTransferPlanServiceImpl @Description： TODO
 * @author ：chenwendong
 * @date ：2019年8月15日 上午11:22:43
 *
 */
@Service
@Transactional
public class JdTransferPlanServiceImpl implements JdTransferPlanService {

	@Autowired
	private ObjectMapper objectMapper;
	@Autowired
	private UranusValidator uranusValidator;
	@Autowired
	private ProjBaseService projBaseService;
	@Autowired
	private CreateKeyService createKeyService;
	@Autowired
	JdTransferPlansDataMapper jdTransferPlansDataMapper;
	@Autowired
	TransferPlan2311Service transferPlan2311Service;
	@Autowired
	JdLoanPaymentStepDataMapper jdLoanPaymentStepDataMapper;
	@Autowired
	JdRepurchaseApplyDataMapper jdRepurchaseApplyDataMapper;
	@Autowired
	private SearchService searchService;
	@Autowired
	PaymentOrder2312Service paymentOrder2312Service;
	@Autowired
	JdPaymentOrderDataMapper jdPaymentOrderDataMapper;
	@Autowired
	RepurchaseApply3306Service repurchaseApply3306Service;

	/**
	 * 扣款计划上传校验部分
	 * 
	 * @param projNo     信托项目编号
	 * @param bizContent 已经解密后的消息正文
	 * @param channelId  京东机构编号，AOP插入ws_base记录表会使用
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	@WsBaseLog
	public JdResponseView syncTransferPlan(String projNo, String channelId, String bizContent) {
		JdResponseView JdResponseView = null;
		// 通过项目号查询机构信息
		ProjBaseData projBaseData = projBaseService.getByProjNo(projNo);
		if (projBaseData != null && !StringUtils.isEmpty(projBaseData.getBrNo())) {
			// 此处要处理的是京东的消息正文，，此部分不是走的rest服务，所以这部分不是View对象，而是一个Bean对象。你可以理解为一个POJO，或者把这个理解为一个DTO也可以。我建议就把它当作一个POJO对象，就叫JdLoanSyncRepayPlan或者JdLoanSyncRepayPlanEntity
			try {
				JdLoanTransferPlan jdLoanTransferPlan = objectMapper.readValue(bizContent, JdLoanTransferPlan.class);
				List<String> errorMessList = uranusValidator.validatorAll(jdLoanTransferPlan);
				if (errorMessList.size() == 0) {
					String brNo = projBaseData.getBrNo();
					/**
					 * 扣款计划校验
					 */
					Map<String, Object> checkMap = checkRepayPlan(brNo, jdLoanTransferPlan, projNo);
					JdResponseView = (JdResponseView)checkMap.get("jdResponseView");
					// 校验成功
					if (JdResponseView != null && JdResponseStatus.SUCCESS_FOR_DEAL.businessCode().equals(JdResponseView.getCode())) {
						//线下扣款直接返回
						if(JdResponseStatus.TRANSFER_TYPE_OUTLINE.businessCode().equals(jdLoanTransferPlan.getPaymentAgentType())) {
							return JdResponseView;
						} else if(JdResponseStatus.TRANSFER_TYPE_ONLINE.businessCode().equals(jdLoanTransferPlan.getPaymentAgentType())) {
							//线上扣款发送2311接口
							List<JdTransferPlansData> jdTransferPlansDataList = (List<JdTransferPlansData>)checkMap.get("dataList");
							String batchNo = (String)checkMap.get("batchNo");
							return getTransferPlan(brNo, jdTransferPlansDataList, batchNo);
						}
					} else {//若校验失败则直接返回
						return JdResponseView;
					}

				} else {
					throw PlatformExceptionFactory.paramInValidateException(CmsBusinessStatus.INVALIDATE_PARAM)
							.build(errorMessList);
				}
			} catch (IOException e) {
				throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
			}
		} else {
			throw PlatformExceptionFactory.exception(JdResponseStatus.PROJ_UNEXISTS).build(JdResponseStatus.PROJ_UNEXISTS.businessMessage());
		}
		return JdResponseView;
	}

	/**
	 * @Description 扣款计划上传接口入库、请求小微、将响应转换成京东所需响应
	 * @param projNo              信托项目编号
	 * @param brNo                合作机构编号
	 * @param jdLoanSyncRepayPlan 还款计划数据
	 */
	public JdResponseView getTransferPlan(String brNo, List<JdTransferPlansData> jdTransferPlansDataList, String batchNo) {
		  // 线上扣款
		  return transferPlan2311Service.request2311(brNo, createKeyService.getJdTradeNo(), jdTransferPlansDataList, batchNo);
		  
		 }

	/**
	 * 
	* @Title：getRequest2202ForTransfer 
	* @Description：拼接小薇2202请求报文
	* @param ：@param brNo
	* @param ：@param tradeNo
	* @param ：@param aplicationNo
	* @param ：@return 
	* @return ：Request 
	* @throws
	 */
	public Request getRequest2202ForTransfer(String brNo, String tradeNo, String aplicationNo) {
		Request2202Dto request2202Dto = new Request2202Dto();
		request2202Dto.setBrNo(brNo);
		request2202Dto.setPactNo(aplicationNo);
		// 拼发送小微报文
		Request request = new Request();
		request.setTxCode(CmsBusinessStatus.WS_2202.businessCode()); // 接口编号
		request.setBrNo(brNo); // 机构号
		request.setReqDate(DateUtils.nowDateFormat()); // 设置请求日期
		request.setToken("test"); // 设置token
		request.setReqTime(DateUtils.nowTimeFormat()); // 设置请求时间
		request.setReqSerial(tradeNo); // 设置请求流水号
		try {
			request.setContent(objectMapper.writeValueAsString(request2202Dto));
		} catch (JsonProcessingException e) {
			throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
		}
		return request;
	}

	/**
	 * 
	* @Title：transplanExam 
	* @Description：线下扣款校验
	* @param ：@param brNo
	* @param ：@param jdLoanTransferPlan
	* @param ：@param projNo
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	public Map<String, Object> checkRepayPlan(String brNo, JdLoanTransferPlan jdLoanTransferPlan, String projNo) {

		JdResponseView jdResponseView = null;
		Map<String, Object> resultMap = new HashMap<String, Object>();
		// 获取申请号
		String batchNo = jdLoanTransferPlan.getBatchNumber(); // 批次号
		String transferType = jdLoanTransferPlan.getTransferType(); // 扣款类型
		String paymentAgentType = jdLoanTransferPlan.getPaymentAgentType(); // 支付受托方类型
		/**
		 * 将请求转换成DATA对象
		 */
		List<JdTransferPlansData> jdTransferPlansDataList = jdLoanTransferPlan.getTransferPlans().stream().map(pojo -> {
			JdTransferPlansData jdTransferPlansData = BeanCopyUtils.INSTANCE.convertTo(pojo, JdTransferPlansData.class);
			jdTransferPlansData.setBatchNumber(batchNo);
			jdTransferPlansData.setTransferType(transferType);
			jdTransferPlansData.setPaymentAgentType(paymentAgentType);
			jdTransferPlansData.setLoanSts(JdResponseStatus.LOAN_STS.businessCode());
			jdTransferPlansData.setCreateDate(DateUtils.nowDateFormat());
			jdTransferPlansData.setCreateTime(DateUtils.nowTimeFormat());
			jdTransferPlansData.setUpDate(DateUtils.nowDateFormat());
			jdTransferPlansData.setUpTime(DateUtils.nowTimeFormat());
			return jdTransferPlansData;
		}).collect(Collectors.toList());

		String tradeNo = createKeyService.getJdTradeNo();
		/**
		 * 校验京东上传的扣款计划
		 */
		for (JdTransferPlansData V : jdTransferPlansDataList) {

			String applicationNo = V.getApplicationNo();

			// 1. 校验贷款单不存在(通过申请号查询JD_LOAN_PAYMENT_STEP放款步骤表，是否存在记录)；
			List<JdLoanPaymentStepData> jdLoanPaymentStepData = jdLoanPaymentStepDataMapper
					.getByApplicationNo(applicationNo);
			if (jdLoanPaymentStepData == null) {
				// 返回贷款单不存在
				jdResponseView = new JdResponseView(JdResponseStatus.NO_LOAN_PAYMENT.businessCode(),
						JdResponseStatus.NO_LOAN_PAYMENT.businessMessage(), tradeNo, null);
				resultMap.put("jdResponseView", jdResponseView);
				return resultMap;
			}

			// 2. 校验贷款单已回购（根据申请号查询JD_REPURCHASE_APPLY回购申请表，是否存在回购中或回购成功的申请
			List<JdRepurchaseApplyData> jdRepurchaseApplyList = jdRepurchaseApplyDataMapper
					.getByApplicationNoAndSts(applicationNo);
			if (jdRepurchaseApplyList.size() > 0) {
				// 返回贷款单已回购
				jdResponseView = new JdResponseView(JdResponseStatus.PAYMENT_REPURCHASED.businessCode(),
						JdResponseStatus.PAYMENT_REPURCHASED.businessMessage(), tradeNo, null);
				resultMap.put("jdResponseView", jdResponseView);
				return resultMap;
			}
			// 查询校验还款计划
			resultMap = checkRepayPlanDetail(V, brNo, tradeNo, applicationNo);
			jdResponseView = (JdResponseView) resultMap.get("jdResponseView");
			// 如果处理成功入库
			if (JdResponseStatus.SUCCESS_FOR_DEAL.businessCode().equals(jdResponseView.getCode())) {
				jdTransferPlansDataMapper.insert(jdTransferPlansDataList);
				resultMap.put("dataList", jdTransferPlansDataList);
				resultMap.put("batchNo", batchNo);
			}
		}
		return resultMap;
	}

	/**
	 * 
	* @Title：findAndExamTransplan 
	* @Description：查询校验还款计划
	* @param ：@param V
	* @param ：@param brNo
	* @param ：@param tradeNo
	* @param ：@param applicationNo
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	public Map<String, Object> checkRepayPlanDetail(JdTransferPlansData V, String brNo, String tradeNo,
			String applicationNo) {
		JdResponseView jdResponseView = null;
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			/**
			 * 3. 查询2202接口，校验还款计划是否存在；
			 * 
			 */
			Request request = getRequest2202ForTransfer(brNo, createKeyService.getJdTradeNo(), applicationNo);
			// 发送小微系统
			Response response = searchService.search(CmsBusinessStatus.MFS.businessCode(), request);
			String returnRepayPlan = response.getContent();
			if ("".equals(returnRepayPlan) || returnRepayPlan == null) {
				// 返回还款计划不存在
				jdResponseView = new JdResponseView(JdResponseStatus.NO_REPAYPLAN.businessCode(),
						JdResponseStatus.NO_REPAYPLAN.businessMessage(), tradeNo, null);
				resultMap.put("jdResponseView", jdResponseView);
				return resultMap;
			}
			Map<String, Response2202Dto> map2202 = new HashMap<String, Response2202Dto>();

			List<Response2202Dto> response2202DtoList = objectMapper.readValue(returnRepayPlan,
					new TypeReference<List<Response2202Dto>>() {
					});
			/**
			 * 将还款计划以期次为键，还款计划为值放入map中
			 */
			response2202DtoList.stream().forEach(pojo -> {
				map2202.put(String.valueOf(pojo.getCnt()), pojo);
			});

			/**
			 * 4. 校验前期未还不允许还下一期；
			 */
			if (V.getCurrentIssue() > 1) {// 如果不是第一期
				// 前一期
				Response2202Dto response2202Dto = map2202.get(String.valueOf(V.getCurrentIssue() - 1));
				if (CmsBusinessStatus.SETTLE.businessCode().equals(response2202Dto.getSts())) {
					// 前一期已经结清
					// 5. 校验贷款单已结清（根据还款计划结清状态校验）；
					Response2202Dto response2202Dto1 = map2202.get(String.valueOf(V.getCurrentIssue()));
					if (CmsBusinessStatus.UN_SETTLE.businessCode().equals(response2202Dto1.getSts())) {
						// 本期未结清
						// 6. 校验京东所传本金和利息是否等于小微还款计划本金和利息，期次为：京东方扣款计划上送期次；
						double chargePrcp = V.getChargePrincipal(); // 当期本金
						double chargeRate = V.getChargeRate(); // 当期利息
						if (chargePrcp == response2202Dto1.getPrcpAmt()
								&& chargeRate == response2202Dto1.getNormInt()) {
							// 返回校验通过
							jdResponseView = new JdResponseView(JdResponseStatus.SUCCESS_FOR_DEAL.businessCode(),
									JdResponseStatus.SUCCESS_FOR_DEAL.businessMessage(), tradeNo, null);
						} else {
							// 返回数据参数错误（本金，利息不等）
							jdResponseView = new JdResponseView(JdResponseStatus.REPATPLAN_EXAM_ERROR.businessCode(),
									JdResponseStatus.REPATPLAN_EXAM_ERROR.businessMessage(), tradeNo, null);
						}

					} else {
						// 返回本期已经结清
						jdResponseView = new JdResponseView(JdResponseStatus.PAYMENT_PAYED.businessCode(),
								JdResponseStatus.PAYMENT_PAYED.businessMessage(), tradeNo, null);
					}
				} else {
					// 返回前一期未结清
					jdResponseView = new JdResponseView(JdResponseStatus.LASTPAYMENT_EXISTED.businessCode(),
							JdResponseStatus.LASTPAYMENT_EXISTED.businessMessage(), tradeNo, null);
				}
			} else {
				// 如果是第一期
				// 6. 校验京东所传本金和利息是否等于小微还款计划本金和利息，期次为：京东方扣款计划上送期次；
				Response2202Dto response2202Dto1 = map2202.get(String.valueOf(V.getCurrentIssue()));
				if (CmsBusinessStatus.UN_SETTLE.businessCode().equals(response2202Dto1.getSts())) {
					double chargePrcp = V.getChargePrincipal(); // 当期本金
					double chargeRate = V.getChargeRate(); // 当期利息
					if (chargePrcp == response2202Dto1.getPrcpAmt() && chargeRate == response2202Dto1.getNormInt()) {
						// 返回校验通过
						jdResponseView = new JdResponseView(JdResponseStatus.SUCCESS_FOR_DEAL.businessCode(),
								JdResponseStatus.SUCCESS_FOR_DEAL.businessMessage(), tradeNo, null);

					} else {
						// 返回数据参数错误（本金，利息不等）
						jdResponseView = new JdResponseView(JdResponseStatus.REPATPLAN_EXAM_ERROR.businessCode(),
								JdResponseStatus.REPATPLAN_EXAM_ERROR.businessMessage(), tradeNo, null);
					}
				} else {
					// 返回本期已经结清
					jdResponseView = new JdResponseView(JdResponseStatus.PAYMENT_PAYED.businessCode(),
							JdResponseStatus.PAYMENT_PAYED.businessMessage(), tradeNo, null);
				}
			}
		} catch (IOException e) {
			throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
		}
		resultMap.put("jdResponseView", jdResponseView);
		return resultMap;
	}

	/**
	 * 
	* @Title：paymentOrder
	* @Description：支付订单
	* @param ：@param projNo
	* @param ：@param channelId
	* @param ：@param tradeNo
	* @param ：@param bizContent
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	@Override
	@WsBaseLog
	public JdResponseView paymentOrder(String projNo, String channelId, String bizContent) {
		// 通过项目号查询机构信息
		ProjBaseData projBaseData = projBaseService.getByProjNo(projNo);
		if (projBaseData != null && !StringUtils.isEmpty(projBaseData.getBrNo())) {
			// 此处要处理的是京东的消息正文，，此部分不是走的rest服务，所以这部分不是View对象，而是一个Bean对象。你可以理解为一个POJO，或者把这个理解为一个DTO也可以。我建议就把它当作一个POJO对象，就叫JdLoanSyncRepayPlan或者JdLoanSyncRepayPlanEntity
			try {
				JdLoanPaymentOrder jdLoanPaymentOrder = objectMapper.readValue(bizContent, JdLoanPaymentOrder.class);
				List<String> errorMessList = uranusValidator.validatorAll(jdLoanPaymentOrder);
				if (errorMessList.size() == 0) {
					String brNo = projBaseData.getBrNo();

					return checkPaymentOrder(brNo, jdLoanPaymentOrder, projNo);

				} else {
					throw PlatformExceptionFactory.paramInValidateException(CmsBusinessStatus.INVALIDATE_PARAM)
							.build(errorMessList);
				}
			} catch (IOException e) {
				throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
			}
		} else {
			throw PlatformExceptionFactory.exception(JdResponseStatus.PROJ_UNEXISTS).build("项目不存在");
		}
	}
	/**
	 * @Description 校验支付单
	 * @param projNo              信托项目编号
	 * @param brNo                合作机构编号
	 * @param jdLoanPaymentOrder 支付单信息
	 */
	public JdResponseView checkPaymentOrder(String brNo, JdLoanPaymentOrder jdLoanPaymentOrder, String projNo) {
		String applicationNo = "";
		String batchNumber = jdLoanPaymentOrder.getBatchNumber(); // 批次号
		String transferType = jdLoanPaymentOrder.getTransferType(); // 扣款类型
		// 根据批次号查扣款计划上送表
		List<JdTransferPlansData> jdTransferPlanDataList = jdTransferPlansDataMapper.getByBatchNo(batchNumber);
		if (jdTransferPlanDataList == null) {
			// 返回无批次号对应扣款计划信息
			return new JdResponseView(JdResponseStatus.NO_REPAYPLAN_BATCH.businessCode(),
					JdResponseStatus.NO_REPAYPLAN_BATCH.businessMessage(), createKeyService.getJdTradeNo(), null);
		} else {
			// 根据批次号获取扣款计划上送数据，拼【2312B】接口报文发送给小微
			for (JdTransferPlansData jdTransferPlansData : jdTransferPlanDataList) {
				applicationNo = jdTransferPlansData.getApplicationNo();
			}
			// 小微用批次号
			String batNo = createKeyService.getJdBatchNo();
			return getPaymentOrder(applicationNo, brNo, jdLoanPaymentOrder, jdTransferPlanDataList, batNo, transferType,
					batchNumber);
		}

	}
	/**
	 * 
	* @Title：getPaymentOrder 
	* @Description：TODO
	* @param ：@param applicationNo
	* @param ：@param brNo
	* @param ：@param jdLoanPaymentOrder
	* @param ：@param jdTransferPlanDataList
	* @param ：@param batNo
	* @param ：@param transferType
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	public JdResponseView getPaymentOrder(String applicationNo, String brNo, JdLoanPaymentOrder jdLoanPaymentOrder,
			List<JdTransferPlansData> jdTransferPlanDataList, String batNo, String transferType, String batchNumber) {
		// 此部分的对象同上文解释，也应该是一个Bean对象
		List<JdPaymentOrder> jdPaymentOrderList = jdLoanPaymentOrder.getPaymentOrder();
		// 数量不多的情况下，不要使用parallel多线程，反而降低效率
		List<JdPaymentOrderData> jdPaymentOrderDataList = jdPaymentOrderList.stream().map(pojo -> {
			JdPaymentOrderData jdPaymentOrderData = BeanCopyUtils.INSTANCE.convertTo(pojo, JdPaymentOrderData.class);
			jdPaymentOrderData.setTransferType(transferType);
			jdPaymentOrderData.setBatchNumber(batchNumber);
			jdPaymentOrderData.setMfsBatchNo(batNo);
			jdPaymentOrderData.setApplicationNo(applicationNo);
			jdPaymentOrderData.setCreateDate(DateUtils.nowDateFormat());
			jdPaymentOrderData.setCreateTime(DateUtils.nowTimeFormat());
			return jdPaymentOrderData;
		}).collect(Collectors.toList());

		jdPaymentOrderDataMapper.insert(jdPaymentOrderDataList);

		return paymentOrder2312Service.request2312(brNo, createKeyService.getJdTradeNo(), jdTransferPlanDataList,
				batNo);
	}

	/**
	 * 
	* @Title：paymentOrder
	* @Description：回购申请
	* @param ：@param projNo
	* @param ：@param channelId
	* @param ：@param bizContent
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	@Override
	public JdResponseView repurchaseApply(String projNo, String channelId, String bizContent) {
		// 通过项目号查询机构信息
		ProjBaseData projBaseData = projBaseService.getByProjNo(projNo);
		if (projBaseData != null && !StringUtils.isEmpty(projBaseData.getBrNo())) {
			// 此处要处理的是京东的消息正文，，此部分不是走的rest服务，所以这部分不是View对象，而是一个Bean对象。你可以理解为一个POJO，或者把这个理解为一个DTO也可以。我建议就把它当作一个POJO对象，就叫JdLoanSyncRepayPlan或者JdLoanSyncRepayPlanEntity
			try {
				JDLoanRepurchaseApply jDLoanRepurchaseApply = objectMapper.readValue(bizContent,
						JDLoanRepurchaseApply.class);
				List<String> errorMessList = uranusValidator.validatorAll(jDLoanRepurchaseApply);
				if (errorMessList.size() == 0) {
					String brNo = projBaseData.getBrNo();

					return getRepurchaseApply(brNo, jDLoanRepurchaseApply, projNo);

				} else {
					throw PlatformExceptionFactory.paramInValidateException(CmsBusinessStatus.INVALIDATE_PARAM)
							.build(errorMessList);
				}
			} catch (IOException e) {
				throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
			}
		} else {
			throw PlatformExceptionFactory.exception(JdResponseStatus.PROJ_UNEXISTS).build("项目不存在");
		}
	}

	/**
	 * 
	* @Title：getRepurchaseApply 
	* @Description：回购申请发送小微
	* @param ：@param brNo
	* @param ：@param jdLoanRepurchaseAplly
	* @param ：@param projNo
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	public JdResponseView getRepurchaseApply(String brNo, JDLoanRepurchaseApply jdLoanRepurchaseAplly, String projNo) {
		String applicationNo = jdLoanRepurchaseAplly.getApplicationNo();
		// 校验该贷款单是否存在回购中或回购成功的申请
		List<JdRepurchaseApplyData> jdRepurchaseApplyDataList = jdRepurchaseApplyDataMapper
				.getByApplicationNoAndSts(applicationNo);
		if (!jdRepurchaseApplyDataList.isEmpty()) {
			// 已经存在回购申请，直接返回
			return new JdResponseView(JdResponseStatus.PAYMENT_REPURCHASED.businessCode(),
					JdResponseStatus.PAYMENT_REPURCHASED.businessMessage(), createKeyService.getJdTradeNo(), null);
		}
		// 入库
		JdRepurchaseApplyData jdRepurchaseApplyData = BeanCopyUtils.INSTANCE.convertTo(jdLoanRepurchaseAplly,
				JdRepurchaseApplyData.class);
		jdRepurchaseApplyData.setCreateDate(DateUtils.nowDateFormat());
		jdRepurchaseApplyData.setCreateTime(DateUtils.nowTimeFormat());
		jdRepurchaseApplyDataMapper.insert(jdRepurchaseApplyData);

		// 发送小微
		JdResponseView jdResponseView = repurchaseApply3306Service.request3306(brNo, jdRepurchaseApplyData,
				createKeyService.getJdTradeNo(), projNo);

		if (JdResponseStatus.SUCCESS.businessCode().equals(jdResponseView.getCode())) {
			// 成功修改数据为回购中
			jdRepurchaseApplyData.setRepurchaseSts(JdResponseStatus.ON_REPURCHASE.businessCode());
			jdRepurchaseApplyDataMapper.updateByApplicationNo(jdRepurchaseApplyData);
		} else {
			// 其他为回购失败
			jdRepurchaseApplyData.setRepurchaseSts(JdResponseStatus.FAIL_REPURCHASE.businessCode());
			jdRepurchaseApplyDataMapper.updateByApplicationNo(jdRepurchaseApplyData);
		}
		return jdResponseView;

	}
	
}
