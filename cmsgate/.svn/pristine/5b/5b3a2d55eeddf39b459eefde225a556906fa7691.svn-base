package com.uranus.platform.business.jd.service.trans;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.uranus.platform.business.jd.dao.JdLoanApplyInfoDataMapper;
import com.uranus.platform.business.jd.entity.po.JdLoanApplyInfoData;
import com.uranus.platform.business.jd.entity.po.JdLoanUserData;
import com.uranus.platform.business.jd.entity.po.JdRelationUserData;
import com.uranus.platform.business.jd.entity.pojo.JdErrorMessage;
import com.uranus.platform.business.jd.entity.status.JdResponseStatus;
import com.uranus.platform.business.jd.entity.vo.JdResponseView;
import com.uranus.platform.business.pub.entity.dto.LnRelDto;
import com.uranus.platform.business.pub.entity.dto.Request2001Dto;
import com.uranus.platform.business.pub.entity.dto.Request2001ListDto;
import com.uranus.platform.business.pub.entity.dto.Response2001Dto;
import com.uranus.platform.business.pub.entity.po.ParmDicData;
import com.uranus.platform.business.pub.service.CreateKeyService;
import com.uranus.platform.business.pub.service.ParmDicService;
import com.uranus.platform.business.ws.process.Request;
import com.uranus.platform.business.ws.process.Response;
import com.uranus.platform.business.ws.service.ProcessService;
import com.uranus.platform.utils.exception.PlatformExceptionFactory;
import com.uranus.platform.utils.status.CmsBusinessStatus;
import com.uranus.tools.utils.DateUtils;

/**
 * @Describe: 向小微2001贷款申请接口发送请求，并且向京东返回响应数据
 * @author    wangshuai0106@dhcc.com.cn
 * @Date 创建时间：2019年8月8日 下午8:19:37
 * 
 */
@Service
public class LnApplyTrans2001Service {
	@Autowired
	private ObjectMapper objectMapper;
	@Autowired
	private ProcessService processService;
	@Autowired
	private ParmDicService parmDicService;
	@Autowired
	private CreateKeyService createKeyService;
	@Autowired
	private JdLoanApplyInfoDataMapper jdLoanApplyInfoDataMapper;

	/**
	 * @Description 拼装报文、请求小微、转换响应
	 * @param tradeNo 交易流水号
	 * @param brNo    合作机构编号
	 * @param projNo  信托项目编号
	 * @param Data    京东数据
	 * @return 京东响应数据、京东业务数据
	 */
	public JdResponseView request2001(String tradeNo, String brNo, String projNo, String prdtNo, Map<String, Object> mapEntry) {
		// 拼发送小微业务数据
		Request request = getRequest2001(tradeNo, brNo, projNo, prdtNo, mapEntry);
		// 发送小微系统
		Response response = processService.wsProcess(CmsBusinessStatus.MFS.businessCode(), request); 
		// 转换小微的响应为京东所需响应数据
		JdResponseView jdResponseView = transLnApplyResponse(tradeNo, response, mapEntry);

		return jdResponseView;
	}

	/**
	 * @Description: 拼发送小微请求报文
	 * @param brNo
	 * @param projNo
	 * @param mapEntry
	 * @return 小微请求报文
	 */
	@SuppressWarnings("unchecked")
	public Request getRequest2001(String tradeNo, String brNo, String projNo, String prdtNo, Map<String, Object> mapEntry) {
		//获取已导入数据库的Data层数据
		JdLoanApplyInfoData jdLoanApplyInfoData = (JdLoanApplyInfoData)mapEntry.get("jdLoanApplyInfoData");
		JdLoanUserData jdLoanUserData = (JdLoanUserData)mapEntry.get("jdLoanUserData");
		List<JdRelationUserData> jdRelationUserDataList = (List<JdRelationUserData>)mapEntry.get("jdRelationUserDataList");

		//选用域数据取值
		if(jdLoanUserData.getPostcode() == null) {
			jdLoanUserData.setPostcode("000000");
		}
		if(jdLoanUserData.getAddress() == null) {
			jdLoanUserData.setAddress("北京市东城区");
		}
		if(jdLoanUserData.getEmail() == null) {
			jdLoanUserData.setAddress("1111@1111.com");
		}
		if(jdLoanUserData.getCensusRegister() == null) {
			jdLoanUserData.setCensusRegister("1111");
		}
		if(jdLoanUserData.getCensusRegisterAddress() == null) {
			jdLoanUserData.setCensusRegisterAddress("北京市东城区");
		}
		if(jdLoanUserData.getMonthlyIncome() == null) {
			jdLoanUserData.setMonthlyIncome(5000.00);
		}
		if(jdLoanUserData.getHomeAddress() == null) {
			jdLoanUserData.setHomeAddress("北京市东城区");
		}
		if(jdLoanUserData.getHomePostcode() == null) {
			jdLoanUserData.setHomePostcode("000000");
		}
		if(jdLoanUserData.getHomeTelphone() == null) {
			jdLoanUserData.setHomeTelphone("17000000000");
		}
		if(jdLoanUserData.getUserNetAssets() == null) {
			jdLoanUserData.setUserNetAssets(100000.00);
		}
		if(jdLoanUserData.getUserHouseValue() == null) {
			jdLoanUserData.setUserHouseValue(1000000.00);
		}
		if(jdLoanUserData.getUserHouseArea() == null) {
			jdLoanUserData.setUserHouseArea(200.00);
		}
		if(jdLoanUserData.getRealEstateType() == null) {
			jdLoanUserData.setRealEstateType(9);
		}
		if(jdLoanUserData.getMaritalStatus() == null) {
			jdLoanUserData.setMaritalStatus("90");
		}
		
		// 小微请求数据Dto声明(插入成功后)
		Request2001Dto requestDto = new Request2001Dto();
		// 判断关系人信息是否为空
		List<Request2001ListDto> cblistDtoList = null;
		if(jdRelationUserDataList != null) {
			cblistDtoList = Assemble(prdtNo, jdLoanApplyInfoData, jdLoanUserData, jdRelationUserDataList);
			requestDto.setList(cblistDtoList);
		}else {
			cblistDtoList = Assemble2(prdtNo, jdLoanApplyInfoData, jdLoanUserData);
			requestDto.setList(cblistDtoList);
		}
		
		String batchNo = CmsBusinessStatus.JD.businessCode()+createKeyService.getBatchNoNo();
		String jdId = (String)mapEntry.get("jdId");
		//更新贷款申请信息表中的批次号信息
		JdLoanApplyInfoData jd = new JdLoanApplyInfoData(jdId,batchNo);
		jdLoanApplyInfoDataMapper.updateBatchNo(jd);
		
		// request请求赋值
		requestDto.setBatchNo(batchNo);
		requestDto.setBrNo(brNo);
		requestDto.setDataCnt(1);
		

		// 发送request请求给小微
		Request request = new Request();
		request.setTxCode(CmsBusinessStatus.WS_2001.businessCode()); // 接口编号
		request.setBrNo(brNo); // 机构号
		request.setReqDate(DateUtils.nowDateFormat()); // 设置请求日期
		request.setToken("test"); // 设置token
		request.setReqTime(DateUtils.nowTimeFormat()); // 设置请求时间
		request.setReqSerial(tradeNo); // 设置请求流水号
		try {
			request.setContent(objectMapper.writeValueAsString(requestDto));
		} catch (JsonProcessingException e) {
			throw PlatformExceptionFactory.jsonParseException(JdResponseStatus.UNKNOWN_ERROR).build(e);
		}
		return request;
	}
	/**
	 * @Description: 拼发送小微请求报文中的从数据库提取的数据(请求数据中无关系人信息)
	 * @param prdtNo
	 * @param jdLoanApplyInfoData
	 * @param jdLoanUserDataList
	 * @param jdRelationUserDataList
	 * @return 小微请求报文
	 */
	private List<Request2001ListDto> Assemble(String prdtNo, JdLoanApplyInfoData jdLoanApplyInfoData, JdLoanUserData jdLoanUserData, List<JdRelationUserData> jdRelationUserDataList){
		// 小微请求数据Dto声明(插入成功后)
		List<Request2001ListDto> cblistDtoList = new ArrayList<Request2001ListDto>();
		List<LnRelDto> cblistRelDtoList = new ArrayList<LnRelDto>();
		// List(Rel)
		LnRelDto cblistRelDto = new LnRelDto();
		for (JdRelationUserData jdRelationUserData : jdRelationUserDataList) {
			//选用域数据赋值
			if(jdRelationUserData.getTelephone() == null) {
				jdRelationUserData.setTelephone("17000000000");
			}
			
			cblistRelDto.setRelIdno(jdRelationUserData.getCertificateNo());
			cblistRelDto.setRelIdtype(jdRelationUserData.getCertificateType());
			cblistRelDto.setRelName(jdRelationUserData.getName());
			cblistRelDto.setRelTel(jdRelationUserData.getTelephone());
			cblistRelDto.setRelType(jdRelationUserData.getRelationType());

			cblistRelDtoList.add(cblistRelDto);
		
		}
		// List(All)
		for (int i = 0; i < jdRelationUserDataList.size(); i++) {
			Request2001ListDto cblistDto = new Request2001ListDto();
			cblistDto.setListRel(cblistRelDtoList);
			cblistDto.setPrePactNo(jdLoanApplyInfoData.getApplicationNo());
			cblistDto.setCustName(jdLoanUserData.getName());
			cblistDto.setIdType(jdLoanUserData.getCeritificateType());
			cblistDto.setIdNo(jdLoanUserData.getCeritificateNo());
			cblistDto.setIdPreDate(jdLoanUserData.getEffstartdate().replace("-", ""));
			cblistDto.setIdEndDate(jdLoanUserData.getEffenddate().replace("-", ""));
			cblistDto.setTrade("26");
			//获取利率类型用来计算发送给小微的利率(月)
			cblistDto.setRateType(jdLoanApplyInfoData.getPrimaryRateType());
			//获取期限类型用来计算申请期限的值
			cblistDto.setPeriodType(jdLoanApplyInfoData.getPeriodType());

			Map<String, String> SexAndBirth = getBirSex(jdLoanUserData.getCeritificateNo());
			
			//1.身份证号码中拆解获取(性别，生日)
			cblistDto.setSex(SexAndBirth.get("sexCode"));
			cblistDto.setBirth(SexAndBirth.get("birthday"));
			
			//2.判断关系人类型是否为配偶（10）
			for(LnRelDto RelDto:cblistRelDtoList) {
				if("10".equals(RelDto.getRelType())) {
					// 转换婚姻状况字典项（待处理）
					ParmDicData marriageDic = parmDicService.getParmDic("MARITAL_STATUS",
							jdLoanUserData.getMaritalStatus());
					if (marriageDic != null) {
						cblistDto.setMarriage(marriageDic.getMateCode());
					} else {
						cblistDto.setMarriage(jdLoanUserData.getMaritalStatus());
					}
					if("20".endsWith(cblistDto.getMarriage())||"21".endsWith(cblistDto.getMarriage())||"22".endsWith(cblistDto.getMarriage())||"23".endsWith(cblistDto.getMarriage())) {
						cblistDto.setMateName(jdRelationUserDataList.get(i).getName());
						cblistDto.setMateIdno(jdRelationUserDataList.get(i).getCertificateNo());
						cblistDto.setMateIdtype(jdRelationUserDataList.get(i).getCertificateType());
						cblistDto.setMateTel(jdRelationUserDataList.get(i).getTelephone());
					}
				}else {
					// 转换婚姻状况字典项
					ParmDicData marriageDic = parmDicService.getParmDic("MARITAL_STATUS",
							jdLoanUserData.getMaritalStatus());
					if (marriageDic != null) {
						cblistDto.setMarriage(marriageDic.getMateCode());
					} else {
						cblistDto.setMarriage(jdLoanUserData.getMaritalStatus());
					}
					
				}
			}
			
			//3.利率处理("02"为月利率;"01"为年利率;"03"为日利率)
			if("02".equals(cblistDto.getRateType())) {
				cblistDto.setInRate(jdLoanApplyInfoData.getPrimaryRate());
			}else if("01".equals(cblistDto.getRateType())) {
				BigDecimal a1 = new BigDecimal(jdLoanApplyInfoData.getPrimaryRate().toString());
				BigDecimal b1 = a1.divide(new BigDecimal(12));
				//四舍五入
				cblistDto.setInRate(b1.setScale(2, RoundingMode.UP).doubleValue());
			}else if("03".equals(cblistDto.getRateType())) {
				BigDecimal a1 = new BigDecimal(jdLoanApplyInfoData.getPrimaryRate().toString());
				BigDecimal b1 = a1.multiply(new BigDecimal(365));
				BigDecimal c1 = b1.divide(new BigDecimal(12));
				//日利率*365/12(四舍五入)
				cblistDto.setInRate(c1.setScale(2, RoundingMode.UP).doubleValue());
			}
			
			//4.合同期限
			if("02".equals(cblistDto.getPeriodType())){
			cblistDto.setTermMon(jdLoanApplyInfoData.getExpiresMonth());
			cblistDto.setTermDay(0);
			}else if("01".equals(cblistDto.getPeriodType())) {
				BigDecimal a1 = new BigDecimal(jdLoanApplyInfoData.getExpiresMonth().toString());
				cblistDto.setTermMon(a1.divide(new BigDecimal(30)).intValue());
				cblistDto.setTermDay(a1.divideAndRemainder(new BigDecimal(30))[1].intValue());
			}
			//5.转换扣款日类型字典项
			ParmDicData payTypeDic = parmDicService.getParmDic("PAY_TYPE", jdLoanApplyInfoData.getChargeDateType());
			if (payTypeDic != null) {
				cblistDto.setPayType(payTypeDic.getMateCode());
			} else {
				cblistDto.setPayType(jdLoanApplyInfoData.getChargeDateType());
			}
			//6.计算年收入
			BigDecimal b1 = new BigDecimal(jdLoanUserData.getMonthlyIncome().toString());
			cblistDto.setZxhomeIncome(b1.multiply(new BigDecimal(12)).doubleValue());
			
			
			//7.小微生产上规定为必填,在此添加测试
			cblistDto.setIfId("2");
			cblistDto.setIfCar("2");
			cblistDto.setVouType("4");
			cblistDto.setIncome("10");
			cblistDto.setIfApp("1");
			cblistDto.setTelNo("1");
			cblistDto.setHomeIncome("11");
			cblistDto.setIfRoom("1");
			cblistDto.setCustType("01");
			cblistDto.setHomeCode("100000");
			cblistDto.setIfCard("2");
			cblistDto.setIfMort("2");
			cblistDto.setIfCarCred("2");
			cblistDto.setCardAmt("0.00");
			cblistDto.setIfPact("2");
			
			//8.待处理
			cblistDto.setHomeAddr("北京市东城区");
			
			//正常赋值
			cblistDto.setEdu(jdLoanUserData.getEducation());
			cblistDto.setDegree("9");
			cblistDto.setPhoneNo(jdLoanUserData.getCellphone());
			cblistDto.setPostCode(jdLoanUserData.getPostcode());
			cblistDto.setPostAddr(jdLoanUserData.getAddress());
			cblistDto.setHomeSts("9");
			cblistDto.setMincome(jdLoanUserData.getMonthlyIncome());	
			cblistDto.setProjNo(jdLoanApplyInfoData.getChannelProdNo());
	    	cblistDto.setPrdtNo(prdtNo);
			cblistDto.setPactAmt(jdLoanApplyInfoData.getContractAmount());
			cblistDto.setAppArea("000000");
			cblistDto.setAppUse("07");
			cblistDto.setWorkType("Z");
			cblistDto.setWorkName("未知");
			cblistDto.setWorkWay("Z");
			cblistDto.setWorkDuty("9");
			cblistDto.setWorkTitle("0");
			cblistDto.setIfLaunder("02");
			cblistDto.setLaunder("03");
			cblistDto.setSales("01");
			cblistDto.setIfAgent("02");
			cblistDto.setCountry("CHN");
			cblistDto.setProfession("12");

			cblistDtoList.add(cblistDto);
		
		}
		return cblistDtoList;
		}
	/**
	 * @Description: 拼发送小微请求报文中的从数据库提取的数据(请求数据中无关系人信息)
	 * @param prdtNo
	 * @param jdLoanApplyInfoData
	 * @param jdLoanUserDataList
	 * @param jdRelationUserDataList
	 * @return 小微请求报文
	 */
	private List<Request2001ListDto> Assemble2(String prdtNo, JdLoanApplyInfoData jdLoanApplyInfoData, JdLoanUserData jdLoanUserData){
		// 小微请求数据Dto声明(插入成功后)
		List<Request2001ListDto> cblistDtoList = new ArrayList<Request2001ListDto>();
		//无关系人信息，赋默认值
		List<LnRelDto> cblistRelDtoList = new ArrayList<LnRelDto>();
		LnRelDto cblistRelDto = new LnRelDto();
		cblistRelDto.setRelName("未知");
		cblistRelDto.setRelTel("17000000000");
		cblistRelDtoList.add(cblistRelDto);
		// List(All)
			Request2001ListDto cblistDto = new Request2001ListDto();
			cblistDto.setPrePactNo(jdLoanApplyInfoData.getApplicationNo());
			cblistDto.setCustName(jdLoanUserData.getName());
			cblistDto.setIdType(jdLoanUserData.getCeritificateType());
			cblistDto.setIdNo(jdLoanUserData.getCeritificateNo());
			cblistDto.setIdPreDate(jdLoanUserData.getEffstartdate().replace("-", ""));
			cblistDto.setIdEndDate(jdLoanUserData.getEffenddate().replace("-", ""));
			cblistDto.setTrade("26");
			//获取利率类型用来计算发送给小微的利率(月)
			cblistDto.setRateType(jdLoanApplyInfoData.getPrimaryRateType());
			//获取期限类型用来计算申请期限的值
			cblistDto.setPeriodType(jdLoanApplyInfoData.getPeriodType());

			Map<String, String> SexAndBirth = getBirSex(jdLoanUserData.getCeritificateNo());
			
			//1.身份证号码中拆解获取(性别，生日)
			cblistDto.setSex(SexAndBirth.get("sexCode"));
			cblistDto.setBirth(SexAndBirth.get("birthday"));
			
			//2.转换婚姻状况字典项（待处理）
			ParmDicData marriageDic = parmDicService.getParmDic("MARITAL_STATUS",
					jdLoanUserData.getMaritalStatus());
			if (marriageDic != null) {
				cblistDto.setMarriage(marriageDic.getMateCode());
			} else {
				cblistDto.setMarriage(jdLoanUserData.getMaritalStatus());
			}
			
			
			//3.利率处理("02"为月利率;"01"为年利率;"03"为日利率)
			if("02".equals(cblistDto.getRateType())) {
				cblistDto.setInRate(jdLoanApplyInfoData.getPrimaryRate());
			}else if("01".equals(cblistDto.getRateType())) {
				BigDecimal a1 = new BigDecimal(jdLoanApplyInfoData.getPrimaryRate().toString());
				BigDecimal b1 = a1.divide(new BigDecimal(12));
				//四舍五入
				cblistDto.setInRate(b1.setScale(2, RoundingMode.UP).doubleValue());
			}else if("03".equals(cblistDto.getRateType())) {
				BigDecimal a1 = new BigDecimal(jdLoanApplyInfoData.getPrimaryRate().toString());
				BigDecimal b1 = a1.multiply(new BigDecimal(365));
				BigDecimal c1 = b1.divide(new BigDecimal(12));
				//日利率*365/12(四舍五入)
				cblistDto.setInRate(c1.setScale(2, RoundingMode.UP).doubleValue());
			}
			
			//4.合同期限
			if("02".equals(cblistDto.getPeriodType())){
			cblistDto.setTermMon(jdLoanApplyInfoData.getExpiresMonth());
			cblistDto.setTermDay(0);
			}else if("01".equals(cblistDto.getPeriodType())) {
				BigDecimal a1 = new BigDecimal(jdLoanApplyInfoData.getExpiresMonth().toString());
				cblistDto.setTermMon(a1.divide(new BigDecimal(30)).intValue());
				cblistDto.setTermDay(a1.divideAndRemainder(new BigDecimal(30))[1].intValue());
			}
			//5。转换扣款日类型字典项
			ParmDicData payTypeDic = parmDicService.getParmDic("PAY_TYPE", jdLoanApplyInfoData.getChargeDateType());
			if (payTypeDic != null) {
				cblistDto.setPayType(payTypeDic.getMateCode());
			} else {
				cblistDto.setPayType(jdLoanApplyInfoData.getChargeDateType());
			}
			//6.计算年收入
			BigDecimal b1 = new BigDecimal(jdLoanUserData.getMonthlyIncome().toString());
			cblistDto.setZxhomeIncome(b1.multiply(new BigDecimal(12)).doubleValue());
			
			
			//7.小微生产上规定为必填,在此添加测试
			cblistDto.setIfId("2");
			cblistDto.setIfCar("2");
			cblistDto.setVouType("4");
			cblistDto.setIncome("10");
			cblistDto.setIfApp("1");
			cblistDto.setTelNo("1");
			cblistDto.setHomeIncome("11");
			cblistDto.setIfRoom("1");
			cblistDto.setCustType("01");
			cblistDto.setHomeCode("100000");
			cblistDto.setIfCard("2");
			cblistDto.setIfMort("2");
			cblistDto.setIfCarCred("2");
			cblistDto.setCardAmt("0.00");
			cblistDto.setIfPact("2");
			
			//8.待处理
			cblistDto.setHomeAddr("北京市东城区");
			
			//正常赋值
			cblistDto.setEdu(jdLoanUserData.getEducation());
			cblistDto.setDegree("9");
			cblistDto.setPhoneNo(jdLoanUserData.getCellphone());
			cblistDto.setPostCode(jdLoanUserData.getPostcode());
			cblistDto.setPostAddr(jdLoanUserData.getAddress());
			cblistDto.setHomeSts("9");
			cblistDto.setMincome(jdLoanUserData.getMonthlyIncome());	
			cblistDto.setProjNo(jdLoanApplyInfoData.getChannelProdNo());
	    	cblistDto.setPrdtNo(prdtNo);
			cblistDto.setPactAmt(jdLoanApplyInfoData.getContractAmount());
			cblistDto.setAppArea("000000");
			cblistDto.setAppUse("07");
			cblistDto.setWorkType("Z");
			cblistDto.setWorkName("未知");
			cblistDto.setWorkWay("Z");
			cblistDto.setWorkDuty("9");
			cblistDto.setWorkTitle("0");
			cblistDto.setIfLaunder("02");
			cblistDto.setLaunder("03");
			cblistDto.setSales("01");
			cblistDto.setIfAgent("02");
			cblistDto.setCountry("CHN");
			cblistDto.setProfession("12");

			cblistDtoList.add(cblistDto);
		
		
		return cblistDtoList;
		}
	
	 /**
     * 通过身份证号码获取出生日期、性别、
     * @param certificateNo
     * @return 返回的出生日期格式：19900101   性别格式：2-女，1-男
     */
    public Map<String, String> getBirSex(String certificateNo) {
        String birthday = "";
        String sexCode = "";
        char[] number = certificateNo.toCharArray();
        boolean flag = true;
        if (number.length == 15) {
            for (int x = 0; x < number.length; x++) {
                if (!flag) 
                	return new HashMap<String, String>();
                flag = Character.isDigit(number[x]);
            }
        } else if (number.length == 18) {
            for (int x = 0; x < number.length - 1; x++) {
                if (!flag) 
                	return new HashMap<String, String>();
                flag = Character.isDigit(number[x]);
            }
        }
        if (flag && certificateNo.length() == 15) {
            birthday = "19" + certificateNo.substring(6, 8) 
                    + certificateNo.substring(8, 10) 
                    + certificateNo.substring(10, 12);
            sexCode = Integer.parseInt(certificateNo.substring(certificateNo.length() - 3, certificateNo.length())) % 2 == 0 ? "2" : "1";
        } else if (flag && certificateNo.length() == 18) {
            birthday = certificateNo.substring(6, 10) 
                    + certificateNo.substring(10, 12) 
                    + certificateNo.substring(12, 14);
            sexCode = Integer.parseInt(certificateNo.substring(certificateNo.length() - 4, certificateNo.length() - 1)) % 2 == 0 ? "2" : "1";
        }
        Map<String, String> map = new HashMap<String, String>();
        map.put("birthday", birthday);
        map.put("sexCode", sexCode);
        return map;
}
    
    
    /**
	 * @Description 转换贷款申请接口响应
	 * @param tradeNo  交易流水号
	 * @param response 小微响应
	 * @return 京东响应
	 */
	public JdResponseView transLnApplyResponse(String tradeNo, Response response, Map<String, Object> mapEntry) {
		JdResponseView jdResponseView = null;
		try {
			if (response != null) {
				// 判断业务是否成功
				if (CmsBusinessStatus.MFS_SUCCESS.businessCode().equals(response.getRespCode())) {
					//业务成功后数据库更新贷款申请表信息中的审批结果与审批时间
					String jdId = (String)mapEntry.get("jdId");
					String auditResult = JdResponseStatus.ADUIT_RESULT_NO.businessCode();
					String auditDate = DateUtils.nowTimeFormat();
					JdLoanApplyInfoData jd = new JdLoanApplyInfoData(jdId,auditResult,auditDate);
					jdLoanApplyInfoDataMapper.updateSuccessAudit(jd);
					jdResponseView = new JdResponseView(JdResponseStatus.SUCCESS_FOR_DEAL.businessCode(),
							JdResponseStatus.SUCCESS_FOR_DEAL.businessMessage(), tradeNo, "{}");
				}if (CmsBusinessStatus.MFS_HALF_SUCCESS.businessCode().equals(response.getRespCode())) {
//					//业务成功后数据库更新贷款申请表信息中的审批结果与审批时间
//		            String msg = response.getContent().toString();
//					String jdId = (String)mapEntry.get("jdId");
//					String auditResult = JdResponseStatus.ADUIT_RESULT_NO.businessCode();
//					String auditDate = DateUtils.nowTimeFormat();
//					JdLoanApplyInfoData jd = new JdLoanApplyInfoData(jdId,auditResult,auditDate);
//					jdLoanApplyInfoDataMapper.updateSuccessAudit(jd);
//					jdResponseView = new JdResponseView(JdResponseStatus.DATA_ERROR.businessCode(),
//							JdResponseStatus.DATA_ERROR.businessMessage(), tradeNo, "{}");
					//业务成功后数据库更新贷款申请表信息中的审批结果与审批时间
					Response2001Dto response2001 =  objectMapper.readValue(response.getContent(), Response2001Dto.class);
					String auditReasion = "";
					if(response2001 != null && response2001.getList().size() >0) {
						auditReasion = response2001.getList().get(0).getDealDesc();
					}
					List<String> list = new ArrayList<String>();
					list.add(auditReasion);
					JdErrorMessage jdErrorMessage = new JdErrorMessage();
					jdErrorMessage.setErrorMessages(list);
					String jdId = (String)mapEntry.get("jdId");
					String auditResult = JdResponseStatus.ADUIT_RESULT_FAIL.businessCode();
					String auditDate = DateUtils.nowTimeFormat();
					JdLoanApplyInfoData jd = new JdLoanApplyInfoData(jdId,auditResult,auditDate);
					jdLoanApplyInfoDataMapper.updateSuccessAudit(jd);
					jdResponseView = new JdResponseView(JdResponseStatus.DATA_ERROR.businessCode(),
							JdResponseStatus.DATA_ERROR.businessMessage(), tradeNo, objectMapper.writeValueAsString(jdErrorMessage));
				}else if (CmsBusinessStatus.BUSINESS_FAILURE.businessCode().equals(response.getRespCode()) || CmsBusinessStatus.INVALIDATE_PARAM.businessCode().equals(response.getRespCode()) ) {
					// 如果业务不成功
					//业务失败后数据库更新贷款申请表信息中的审批结果与审批时间与审批拒绝原因
					String jdId = (String)mapEntry.get("jdId");
					String auditResult = JdResponseStatus.ADUIT_RESULT_FAIL.businessCode();
					String auditDate = DateUtils.nowTimeFormat();
					String auditRejectReason = response.getRespDesc();
					JdLoanApplyInfoData jd = new JdLoanApplyInfoData(jdId,auditResult,auditDate,auditRejectReason);
					jdLoanApplyInfoDataMapper.updateFailAudit(jd);
					// 传给JD——业务返回码、业务返回描述、交易流水号
					jdResponseView = new JdResponseView(JdResponseStatus.DATA_ERROR.businessCode(),
							JdResponseStatus.DATA_ERROR.businessMessage(), tradeNo, "{}");
				}
			} else {
				jdResponseView = new JdResponseView(JdResponseStatus.UNKNOWN_ERROR.businessCode(), CmsBusinessStatus.NO_RESPONSE.businessMessage(), tradeNo,
						null);
			}
		} catch (IOException e) {
			throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
		}
		
		return jdResponseView;
	}
}
