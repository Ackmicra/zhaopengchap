package com.uranus.platform.business.jd.service.trans;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.uranus.platform.business.jd.callback.JdCallbackHttpClient;
import com.uranus.platform.business.jd.dao.JdPaymentOrderDataMapper;
import com.uranus.platform.business.jd.dao.JdTransferPlansDataMapper;
import com.uranus.platform.business.jd.entity.po.JdPaymentOrderData;
import com.uranus.platform.business.jd.entity.po.JdTransferPlansData;
import com.uranus.platform.business.jd.entity.pojo.JdPayments;
import com.uranus.platform.business.jd.entity.pojo.JdResponse2313;
import com.uranus.platform.business.jd.entity.status.JdResponseStatus;
import com.uranus.platform.business.jd.entity.vo.JdCallbackRequestView;
import com.uranus.platform.business.jd.entity.vo.JdResponseView;
import com.uranus.platform.business.pub.dao.CallbackFailLogDataMapper;
import com.uranus.platform.business.pub.entity.dto.Request2313Dto;
import com.uranus.platform.business.pub.entity.dto.Response2313Dto;
import com.uranus.platform.business.pub.entity.dto.Response2313List;
import com.uranus.platform.business.pub.entity.po.CallbackFailLogData;
import com.uranus.platform.business.pub.entity.po.ParmDicData;
import com.uranus.platform.business.pub.service.ParmDicService;
import com.uranus.platform.business.ws.search.Request;
import com.uranus.platform.business.ws.search.Response;
import com.uranus.platform.business.ws.service.SearchService;
import com.uranus.platform.utils.exception.PlatformExceptionFactory;
import com.uranus.platform.utils.status.CmsBusinessStatus;
import com.uranus.tools.beans.converter.FormatConverter;
import com.uranus.tools.utils.DateUtils;

import lombok.extern.slf4j.Slf4j;

/**
 * 
* @ClassName:：TransferPlanCalllback2313Service 
* @Description： 扣款计划查询回调
* @author ：chenwendong
* @date ：2019年8月22日 下午4:15:21 
*
 */
@Service
@Slf4j
public class TransferPlanCalllback2313Service {

	@Autowired
	private ObjectMapper objectMapper;
	@Autowired
	SearchService searchService;
	@Autowired
	JdTransferPlansDataMapper jdTransferPlansDataMapper;
	@Autowired
	private JdCallbackHttpClient jdCallbackHttpClient;
	@Autowired
	private ParmDicService parmDicService;
	@Autowired
	private CallbackFailLogDataMapper callbackFailLogDataMapper;
	@Autowired
	JdPaymentOrderDataMapper jdPaymentOrderDataMapper;
	/**
	 * 
	* @Title：request2313 
	* @Description：线上查询2313接口
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	public JdCallbackRequestView request2313(String brNo, String batchNo, String tradeNo, String checkSts, 
			String checkDesc, int delayLevel,String repayType) {
		// 拼发送小微业务数据
		Request request = getRequest2313(brNo, batchNo, tradeNo,repayType );

		// 发送小微系统
		Response response = searchService.search(CmsBusinessStatus.MFS.businessCode(), request);

		// 转换小微的响应为京东所需响应数据
		return transferPlanCallbackResponse(batchNo,response, checkSts, checkDesc, delayLevel,repayType);

	}
	
	/**
	 * 
	* @Title：getTransferPlan 
	* @Description：线下查询扣款表
	* @param ：@param batchNo
	* @param ：@param tradeNo
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	public JdCallbackRequestView getTransferPlan(String batchNo, String checkSts, 
			String checkDesc) {

		// 根据批次号和扣款状态为02-扣款成功查扣款计划
//		List<JdTransferPlansData> jdTransferPlansDatalist = jdTransferPlansDataMapper.getByBatchNoAndSts(batchNo);
		// 转换小微的响应为京东所需响s应数据
//		JdResponseView jdResponseView = outLineResponse(jdTransferPlansDatalist, tradeNo);
		JdCallbackRequestView jdCallbackRequestView = null;
		try {
			JdResponse2313 JdResponse2313 = new JdResponse2313();
			// 校验成功返回检验结果—校验成功，扣款计划执行结果-未执行
			JdResponse2313.setBatchNumber(batchNo);
			if(JdResponseStatus.CHECK_STS_SUCCESS.businessCode().equals(checkSts)) {
				
				JdResponse2313.setValidateStatus(JdResponseStatus.CHECK_SUCCESS.businessCode()); // 为校验成功
				JdResponse2313.setDealStatus(JdResponseStatus.DEAL_STATUS_SUCCESS.businessCode()); // 未执行

			} else if(JdResponseStatus.CHECK_STS_FAIL.businessCode().equals(checkSts)) {
				
				JdResponse2313.setValidateStatus(JdResponseStatus.CHECK_FAILED.businessCode()); // 为校验失败
				JdResponse2313.setDealStatus(JdResponseStatus.DEAL_STATUS_FAILED.businessCode()); // 未执行

			} else {
				JdResponse2313.setValidateStatus(checkSts); // 
			}
			JdResponse2313.setValidateMsg(checkDesc);
			JdResponse2313.setChargeAmount(0.0);

			/**
			 * 拼回调数据
			 */
			jdCallbackRequestView = new JdCallbackRequestView(objectMapper.writeValueAsString(JdResponse2313));
			
		} catch (IOException e) {
			throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
		}
		return jdCallbackRequestView;
	}


	/**  
	* @Description 拼装扣款计划回调接口请求报文
	* @param tradeNo 交易流水号
	* @param brNo 合作机构编号
	* @param JdRepayPlanDataList 京东数据
	* @return 扣款计划上传请求报文
	* @throws  
	*/  
	private Request getRequest2313(String brNo, String batchNo, String tradeNo,String repayType) {

		
		Request2313Dto request2313Dto = new Request2313Dto();
		request2313Dto.setBatNo(batchNo);
		request2313Dto.setBrNo(brNo);
		if (JdResponseStatus.TRANSFER_TYPE_ONLINE.businessCode().equals(repayType)) {
			
		request2313Dto.setOnLine(JdResponseStatus.REPAY_TYPE_ONLINE.businessCode());
		}else {
			
		request2313Dto.setOnLine(JdResponseStatus.REPAY_TYPE_OUTLINE.businessCode());
		}
		request2313Dto.setPageNo(1);
		request2313Dto.setPageSize(9999);

		// 拼发送小微报文
		Request request = new Request();
		request.setTxCode(CmsBusinessStatus.WS_2313.businessCode()); // 接口编号
		request.setBrNo(brNo); // 机构号
		request.setReqDate(DateUtils.nowDateFormat()); // 设置请求日期
		request.setToken("test"); // 设置token
		request.setReqTime(DateUtils.nowTimeFormat()); // 设置请求时间
		request.setReqSerial(tradeNo); // 设置请求流水号
		try {
			request.setContent(objectMapper.writeValueAsString(request2313Dto));
		} catch (JsonProcessingException e) {
			throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
		}
		return request;
	}
	
	/**  
	* @Description 将小微响应报文转换成京东所需响应
	* @param tradeNo 业务流水号
	* @param response 小微响应
	* @return 京东响应
	* @throws  
	*/  
	private JdCallbackRequestView transferPlanCallbackResponse(String batchNo, Response response, String checkSts, 
			String checkDesc, int delayLevel,String repayType) {
		JdCallbackRequestView jdCallbackRequestView = null;
		try {
			if (response != null) {
				// 判断业务是否成功
				if (CmsBusinessStatus.MFS_SUCCESS.businessCode().equals(response.getRespCode())) {
					/**
					 * 何为成功
					 * 	1. 返回码response.getRespCode()为0000
					 * 	2. 总记录数pageCounts大于0
					 * 	3. 批次里的处理状态dealSts为02-处理成功或04-处理失败
					 */
					String mfsContent = response.getContent();
					if(mfsContent != null || !"".equals(mfsContent)) {
						Response2313Dto response2313Dto = objectMapper.readValue(response.getContent(), Response2313Dto.class);
						if(response2313Dto.getPageCounts() > 0) {
							/**
							 * 处理小微响应，回调并重新发送到MQ
							 */
							jdCallbackRequestView = responseTrans(batchNo, response2313Dto, checkSts, checkDesc, delayLevel,repayType);
							
						} else {
							log.info("根据批次号查询记录失败，未查询到数据，{}，批次号：" + batchNo);
							CallbackFailLogData callbackFailLogData = new CallbackFailLogData(batchNo, 
									CmsBusinessStatus.JD.businessCode(), CmsBusinessStatus.WS_2311.businessCode(), 
									DateUtils.nowDateFormat(), DateUtils.nowTimeFormat());
							callbackFailLogDataMapper.insert(callbackFailLogData);
							return null;
						}
					} else {
						log.info("根据批次号查询记录失败，未查询到数据，{}，批次号：" + batchNo);
						CallbackFailLogData callbackFailLogData = new CallbackFailLogData(batchNo, 
								CmsBusinessStatus.JD.businessCode(), CmsBusinessStatus.WS_2311.businessCode(), 
								DateUtils.nowDateFormat(), DateUtils.nowTimeFormat());
						callbackFailLogDataMapper.insert(callbackFailLogData);
						return null;
					}
				} else {
					JdResponse2313 jdResponse2313 = new JdResponse2313();
					jdResponse2313.setBatchNumber(batchNo);
					jdResponse2313.setValidateStatus(JdResponseStatus.CHECK_FAILED.businessCode());// 校验失败
					jdResponse2313.setValidateMsg(response.getRespDesc());
					jdResponse2313.setChargeDate(0L);
					jdResponse2313.setChargeAmount(0.0);
					jdResponse2313.setDealStatus(JdResponseStatus.DEAL_STATUS_UNEXECUTED.businessCode()); //成功
					jdResponse2313.setMessage("");
					
					/**
					 * 拼回调京东报文
					 */
					jdCallbackRequestView = new JdCallbackRequestView(objectMapper.writeValueAsString(jdResponse2313));
				}
			} else {
				/**
				 * 回调失败，将数据重新发送到MQ
				 */
				jdCallbackHttpClient.callbackFailAndSendMQ(batchNo, delayLevel, CmsBusinessStatus.WS_2311.businessCode(), CmsBusinessStatus.CALLBACK_TRANSFER_PLAN_RESULT.businessCode());
				return null;
			}
		} catch (IOException e) {
			throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
		}
		return jdCallbackRequestView;
	}

	/**
	 * 
	* @Title：responseTrans 
	* @Description：返回数据解析
	* @param ：@param response
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	public JdCallbackRequestView responseTrans(String batchNo, Response2313Dto response2313Dto, String checkSts, 
			String checkDesc, int delayLevel,String repayType) {
		JdCallbackRequestView jdCallbackRequestView = null;
		
		JdResponse2313 jdResponse2313 = new JdResponse2313();
		JdPayments jdPayments = new JdPayments();
		List<JdPayments> JdPaymentList = new ArrayList<JdPayments>();
		Response2313List response2313 = response2313Dto.getList().get(0);
		
		try {
			// 如果查询结果为扣款成功
			if (JdResponseStatus.DEAL_STS_SUCCESS.businessCode().equals(response2313.getDealSts())) {
				
				// 扣款成功后更新扣款表状态为扣款成功
				JdTransferPlansData jdTransferPlansData = new JdTransferPlansData();
				jdTransferPlansData.setBatchNumber(batchNo);
				jdTransferPlansData.setUpDate(DateUtils.nowDateFormat());
				jdTransferPlansData.setUpTime(DateUtils.nowTimeFormat());
				jdTransferPlansData.setLoanSts(JdResponseStatus.LOAN_SUCCESS.businessCode());
				jdTransferPlansDataMapper.updateLoanResultByBatchNo(jdTransferPlansData);
				
				if (JdResponseStatus.TRANSFER_TYPE_ONLINE.businessCode().equals(repayType)) {
					// 线上扣款支付信息从2313返回取

					ParmDicData paymentChannelDic = parmDicService.getParmDicByMateCode("PAYMENT_CHANNEL",
							response2313.getPaymentChannel());
					if (paymentChannelDic != null) {
						jdPayments.setPaymentChannel(Integer.parseInt(paymentChannelDic.getOptCode()));
					} else {
						jdPayments.setPaymentChannel(Integer.parseInt(response2313.getPaymentChannel()));
					}
					jdPayments.setPaymentTradeNo(response2313.getPaymentTradeNo());
					jdPayments.setPaymentAmount(response2313.getPaymentAmount());
					jdPayments.setPaymentTime(response2313.getPaymentTime());
					jdPayments.setAccountNo(response2313.getAccountNo());
					jdPayments.setAccountName(response2313.getAccountName());
					jdPayments.setBankName(response2313.getBankName());

				} else {
					// 线下支付信息从支付订单取
					
					JdPaymentOrderData jdPaymentOrderData =  jdPaymentOrderDataMapper.getByBatchNo(batchNo);
					jdPayments.setPaymentChannel(Integer.valueOf(jdPaymentOrderData.getPaymentChannel()));
					jdPayments.setPaymentTradeNo(jdPaymentOrderData.getTradeNo());
					jdPayments.setPaymentAmount(jdPaymentOrderData.getAmount());
					jdPayments.setPaymentTime(jdPaymentOrderData.getTradeTime());
					jdPayments.setAccountNo(jdPaymentOrderData.getPayeeAccountNo());
					jdPayments.setAccountName(jdPaymentOrderData.getPayeeAccountName());
					ParmDicData parmData= parmDicService.getParmDic("BANK_CODE", jdPaymentOrderData.getPayerBankCode());
					if(parmData == null) {
						
					jdPayments.setBankName(jdPaymentOrderData.getPayerBankCode());
					}else {
						jdPayments.setBankName(parmData.getOptName());
					}

				}
				
				JdPaymentList.add(jdPayments);
				// 处理成功返回校验状态-支付成功，扣款计划执行结果-成功
				jdResponse2313.setBatchNumber(batchNo);
				jdResponse2313.setValidateStatus(JdResponseStatus.PAY_SUCCESS.businessCode());// 校验成功
				jdResponse2313.setValidateMsg(checkDesc);
				
				LocalDateTime time = FormatConverter.dateTimeFormat().convertValue("yyyy-MM-dd HH:mm:ss",response2313.getPaymentTime());
				long paymentTime = FormatConverter.dateTime2Stamp().convertValue(null,time);
				jdResponse2313.setChargeDate(paymentTime);
				
				jdResponse2313.setChargeAmount(response2313.getPaymentAmount());
				jdResponse2313.setDealStatus(JdResponseStatus.DEAL_STATUS_SUCCESS.businessCode()); //成功
				jdResponse2313.setMessage("");
				jdResponse2313.setPayments(JdPaymentList);
			} else if (JdResponseStatus.DEAL_STS_FAILED.businessCode().equals(response2313.getDealSts()) || JdResponseStatus.SERVER_EXCEPTION.businessCode().equals(response2313.getDealSts())) {
				
				// 扣款失败后更新扣款表状态为扣款失败
				JdTransferPlansData jdTransferPlansData = new JdTransferPlansData();
				jdTransferPlansData.setBatchNumber(batchNo);
				jdTransferPlansData.setUpDate(DateUtils.nowDateFormat());
				jdTransferPlansData.setUpTime(DateUtils.nowTimeFormat());
				jdTransferPlansData.setLoanSts(JdResponseStatus.LOAN_FAIL.businessCode());
				jdTransferPlansDataMapper.updateLoanResultByBatchNo(jdTransferPlansData);
				
				// 其他状态无支付信息
				// 处理失败返回校验状态-支付失败，扣款计划执行结果-失败
				jdResponse2313.setBatchNumber(batchNo);
				jdResponse2313.setValidateStatus(JdResponseStatus.PAY_FAILED.businessCode());// 校验成功
				jdResponse2313.setValidateMsg(checkDesc);
			//	jdResponse2313.setChargeDate(0L);
				jdResponse2313.setChargeAmount(response2313.getPaymentAmount());
				jdResponse2313.setDealStatus(JdResponseStatus.DEAL_STATUS_FAILED.businessCode()); // 失败
				jdResponse2313.setMessage("");
				jdResponse2313.setPayments(JdPaymentList);
			} else {
				/**
				 * 处理中，将数据重新发送到MQ
				 */
				jdCallbackHttpClient.callbackFailAndSendMQ(batchNo, delayLevel, CmsBusinessStatus.WS_2311.businessCode(), CmsBusinessStatus.CALLBACK_TRANSFER_PLAN_RESULT.businessCode());
				return null;
			}
			jdCallbackRequestView = new JdCallbackRequestView(objectMapper.writeValueAsString(jdResponse2313));
			
		} catch (IOException e) {
			throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
		}
		return jdCallbackRequestView;
	}

	/**
	 * 
	* @Title：outLineResponse 
	* @Description：线下扣款回调返回
	* @param ：@param jdTransferPlansDatalist
	* @param ：@param tradeNo
	* @param ：@return 
	* @return ：JdResponseView 
	* @throws
	 */
	public JdResponseView outLineResponse(List<JdTransferPlansData> jdTransferPlansDatalist, String tradeNo) {

		double chargeAmt = 0.00;
		String batNo = null;
		String checkSts = null;
		JdResponse2313 JdResponse2313 = new JdResponse2313();
		try {

			for (JdTransferPlansData M : jdTransferPlansDatalist) {
				batNo = M.getBatchNumber(); // 批次号
				chargeAmt += M.getChargeAmount();
				checkSts = M.getCheckSts();
			}
			if (JdResponseStatus.CHECK_STS_SUCCESS.businessCode().equals(checkSts)) {
				// 校验成功返回检验结果—校验成功，扣款计划执行结果-未执行
				JdResponse2313.setBatchNumber(batNo);
				JdResponse2313.setValidateStatus(JdResponseStatus.CHECK_SUCCESS.businessCode()); // 为校验成功
				JdResponse2313.setChargeAmount(chargeAmt);
				JdResponse2313.setDealStatus(JdResponseStatus.DEAL_STATUS_UNEXECUTED.businessCode()); // 未执行
			} else if (JdResponseStatus.CHECK_STS_FAIL.businessCode().equals(checkSts)) {
				// 校验失败返回检验结果—校验失败，扣款计划执行结果-未执行
				JdResponse2313.setBatchNumber(batNo);
				JdResponse2313.setValidateStatus(JdResponseStatus.CHECK_FAILED.businessCode()); // 为校验失败
				JdResponse2313.setChargeAmount(chargeAmt);
				JdResponse2313.setDealStatus(JdResponseStatus.DEAL_STATUS_UNEXECUTED.businessCode()); // 未执行
			}

			String responseStr = objectMapper.writeValueAsString(JdResponse2313);

			return new JdResponseView(JdResponseStatus.SUCCESS_FOR_DEAL.businessCode(),
					JdResponseStatus.SUCCESS_FOR_DEAL.businessMessage(), tradeNo, responseStr);

		} catch (IOException e) {
			throw PlatformExceptionFactory.jsonParseException(CmsBusinessStatus.JSON_PARSE_FAILURE).build(e);
		}
	}
	
}
